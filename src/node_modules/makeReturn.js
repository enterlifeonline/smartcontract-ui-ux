const bel = require("bel")
const csjs = require('csjs-inject')

const moreInfo = require('moreInfo')
const getReturnData = require('getReturnData')

const id = 'makeReturn'
var counter = 1

module.exports = makeReturn

async function makeReturn ({ data = {}, theme = {} }, protocol) {
  const name = `${id}/${counter++}`
  const notify = protocol(msg => {
    console.log(`[${name}] receives:`, msg)
    const { type, body: variables } = msg
    if (type === 'theme') return updateTheme(variables)
  })

  const { contract, solcMetadata, provider, transaction, fnName, output } = data
  const css = theme.classes || classes
  const vars = theme.variables || variables
  var opts
  var el = bel`<div class=${css.txReturnItem}></div>`
  var opts = { contract, fnName, solcMetadata}
  opts.transaction = transaction
  var input
  if (transaction.hash) {  // nonpayable and payable
    opts.receipt = await transaction.wait()
    opts.data = transaction.data
    opts.tag = 'transaction'
    input = getReturnData(opts)
    //el.appendChild(moreInfo(provider._network.name, transaction.hash))
  } else { // view and pure
    opts.tag = 'call'
    opts.transaction = transaction
    input = getReturnData(opts)
  }
//  input = JSON.stringify(getReturnData(opts), null, 2))
  result = bel`<div class=${css.txReturnValue}>
    <p>Input: ${input}</p>
    <p>Output: ${output || "[]"}</p>
    ${transaction.hash ? moreInfo(provider._network.name, transaction.hash) : ''}
  </div>`
  if (el.innerHTML) el.replaceWith(result)
  else el.appendChild(result)
  return el

  updateTheme(variables)
  return el
  function updateTheme (vars) {
    Object.keys(variables).forEach(name => {
      el.style.setProperty(`--${name}`, vars[name])
    })
  }
}
const variables = {}
const classes = csjs`
.txReturnItem {
  position: relative;
  border-bottom: 1px solid #21252b;
  width: 100%;
  margin: 0;
  padding: 12px 0;
  transition: color .6s ease-in-out;
}
.txReturnItem:hover {
  background-color: rgba(103,0,255, .8);
}
.txReceipt {
}
.txReturnField {
}
.txReturnValue {
  color: #8d8d8d;
  cursor: pointer;
  word-break: break-all;
  font-size: 1.4rem;
  text-align: center;
  transition: color .6s ease-in-out;
}
.txReturnItem:hover .txReturnValue {
  color: rgba(255,255,255, 1);
}`
