const bel = require("bel")
const csjs = require('csjs-inject')
const getDate = require('getDate')
const moreInfo = require('moreInfo')
const getReturnData = require('getReturnData')

const id = 'makeReturn'
var counter = 1

module.exports = makeReturn

async function makeReturn ({ data = {}, theme = {} }, protocol) {
  const name = `${id}/${counter++}`
  const notify = protocol(msg => {
    console.log(`[${name}] receives:`, msg)
    const { type, body: variables } = msg
    if (type === 'theme') return updateTheme(variables)
  })

  const { contract, solcMetadata, provider, transaction, fnName } = data
  const css = theme.classes || classes
  const vars = theme.variables || variables
  
  var decodedTx
  var data
  var opts
  var el = bel`<div class=${css.txReturnItem}></div>`
  var span = bel`<span class=${css.txReturnCount}>${getDate().getHours()}:${getDate().getMinutes()}:${getDate().getSeconds()}</span>`
  var opts = { contract, fnName, solcMetadata}
  if (transaction.hash) {  // nonpayable and payable
    opts.receipt = await transaction.wait()
    opts.data = transaction.data
    opts.tag = 'input'
    data = getReturnData(opts)
    el.appendChild(`<div class=${css.moreInfo}>${moreInfo(provider._network.name, transaction.hash)}</div>`)
  } else { // view and pure
    opts.transaction = transaction
    opts.tag = 'output'
    data = getReturnData(opts)
  }
  el.appendChild(makeTxReturn(css, data))
  el.appendChild(span)
  updateTheme(variables)
  return el
  function updateTheme (vars) {
    Object.keys(variables).forEach(name => {
      el.style.setProperty(`--${name}`, vars[name])
    })
  }
}
function makeTxReturn (css, data) {
  return bel`<div class=${css.txReturnValue}>${JSON.stringify(data, null, 2)}</div>`
}
const variables = {}
const classes = csjs`
.txReturnItem {
  position: relative;
  width: 100%;
  margin: 0;
  padding: 12px 0;
  transition: color .6s ease-in-out;
}
.txReturnItem:hover {
  background-color: rgba(103,0,255, .8);
}
.txReceipt {
}
.txReturnField {
}
.txReturnValue {
  color: #8d8d8d;
  cursor: pointer;
  word-break: break-all;
  font-size: 1.4rem;
  text-align: center;
  transition: color .6s ease-in-out;
}
.txReturnItem:hover .txReturnValue {
  color: rgba(255,255,255, 1);
}
.moreInfo {

}
.txReturnCount {
  position: absolute;
  right: 15px;
  top: 9px;
  padding: 3px 8px;
  font-size: 1.2rem;
  border-radius: 30px;
  color: #ffffff;
  background-color: rgba(255,255,255, .15);
}
`