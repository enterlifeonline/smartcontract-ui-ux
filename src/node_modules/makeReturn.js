const bel = require("bel")
const moreInfo = require('moreInfo')
const getReturnData = require('getReturnData')
const csjs = require('csjs-inject')
const theme = require('theme')
var colors = setTheme('darkTheme')

module.exports = makeReturn

function setTheme(name) {
  let colors = Object.assign({}, theme(name))
  return colors
}

var css = csjs`
.txReturnItem {
  position: relative;
  border-bottom: 1px solid #21252b;
  width: 100%;
  margin: 0;
  padding: 12px 0;
  transition: color .6s ease-in-out;
}
.txReturnItem:hover {
  background-color: rgba(103,0,255, .8);
}
.txReceipt {
}
.txReturnField {
}
.txReturnValue {
  color: #8d8d8d;
  cursor: pointer;
  word-break: break-all;
  font-size: 1.4rem;
  text-align: center;
  transition: color .6s ease-in-out;
}
.txReturnItem:hover .txReturnValue {
  color: rgba(255,255,255, 1);
}
`

async function makeReturn (contract, solcMetadata, provider, transaction, fnName) {
  var decodedTx
  var data
  var opts
  var el = bel`<div class=${css.txReturnItem}></div>`
  var opts = { contract, fnName, solcMetadata}
  if (transaction.hash) {  // nonpayable and payable
    opts.receipt = await transaction.wait()
    opts.data = transaction.data
    opts.tag = 'input'
    data = getReturnData(opts)
    el.appendChild(moreInfo(provider._network.name, transaction.hash))
  } else { // view and pure
    opts.transaction = transaction
    opts.tag = 'output'
    data = getReturnData(opts)
  }
  el.appendChild(makeTxReturn(css, data))
  return el
}

function makeTxReturn (css, data) {
  return bel`<div class=${css.txReturnValue}>${JSON.stringify(data, null, 2)}</div>`
}
