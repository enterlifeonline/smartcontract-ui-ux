const bel = require("bel")
const csjs = require('csjs-inject')

const date = require('helper/getDate')
const copy = require('copy-text-to-clipboard')
const moreInfo = require('moreInfo')

const id = 'makeDeployReceipt'
var counter = 1

module.exports = makeDeployReceipt

function makeDeployReceipt ({ data, theme = {} }, protocol) {
  const name = `${id}/${counter++}`
  const notify = protocol(msg => {
    console.log(`[${name}] receives:`, msg)
    const { type, body: variables } = msg
    if (type === 'theme') return updateTheme(variables)
  })

  const network = data.provider._network.name
  const creator = data.contract.deployTransaction.creates
  const hash = data.contract.deployTransaction.hash
  const from = data.contract.deployTransaction.from
  const css = Object.assign({}, classes, theme.classes)
  const vars = Object.assign({}, variables, theme.variables)

  const field1 = bel`<div class=${css.txReturnField} title="${creator}">
    <div class=${css.txReturnTitle}>contract address (${network}):</div>
    <div class=${css.txReturnValue}>${creator}</div>
  </div>`
  const field2 = bel`<div class=${css.txReturnField} title="${from}">
    <div class=${css.txReturnTitle}>published by</div>
    <div class=${css.txReturnValue}>${from}</div>
  </div>`
  const el = bel`<div class=${css.txReceipt}>
    <div class=${css.txReturnField}>
      <div class=${css.txReturnTitle}>published</div>
      <div class=${css.txReturnValue}>${date()}</div>
    </div>
    ${field1}
    ${field2}
    ${moreInfo(network, hash)}
  </div>`

  field1.onclick = ()=> copy(creator)
  field2.onclick = ()=> copy(from)
  updateTheme(variables)

  return el
  function updateTheme (vars) {
    Object.keys(variables).forEach(name => {
      el.style.setProperty(`--${name}`, vars[name])
    })
  }
}
const variables = {
  txReturnTitleColor: '#8D8D8D',
  txReturnTitleFontSize: '1.4rem',
  txReturnValueColor: '#09FFC3',
  txReturnValueFontSize:  '1.6rem',
}
const classes = csjs`
.txReceipt {
  display:flex;
  justify-content: flex-start;
  flex-direction: column;
  margin-left: 1em;
  position: relative;
  z-index: 99;
}
.txReturnField {
  display:flex;
  justify-content: flex-start;
  flex-direction: column;
  margin-bottom: 2%;
}
.txReturnTitle {
  color: var(--txReturnTitleColor);
  font-size: var(--txReturnTitleFontSize);
}
.txReturnValue {
  color: var(--txReturnValueColor);
  font-size: var(--txReturnValueFontSize);
  word-break: break-all;
  white-spacing: pre-wrap;
}
.txReturnValue:hover {
  opacity: 0.6;
}
.date {
  margin: 0;
}`