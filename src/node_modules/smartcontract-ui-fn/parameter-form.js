const bel = require('bel')
const csjs = require('csjs-inject')

const inputPayable = require("input-payable")
const inputArray = require("input-array")
const inputInteger = require("input-integer")
const inputByte = require("input-byte")
const inputString = require("input-string")
const inputBoolean = require("input-boolean")
const inputAddress = require("input-address")

const id = 'parameter-form'
var counter = 1

module.exports = parameterForm

function parameterForm ({ data, theme = {} }, protocol) {
  const name = `${id}/${counter++}`
  const notify = protocol(msg => console.log(`[${name}] receives:`, msg))
  const css = theme.classes || classes
  const vars = theme.variables || variables

  const output = bel`<span class=${css.output}></span>`

  return data.map(x => {
    if (x.components) return bel`<li>
      <div>${x.name} (${x.type})</div>
      <ul>${makeParameterForm(x.components)}</ul>
    </li>`
    if (!x.components) return generateInputContainer(x)
  })
  function generateInputContainer (field) {
    var theme = { classes: css, colors: vars }
    var name = field.name
    var type = field.type
    if (type === 'constructore') alert('foo')
    var inputField = getInputField({ theme, type, cb })
    var inputContainer = bel`
      <div class=${css.inputContainer}>
        <label class=${css.inputParam} title="data type: ${type}">${name || 'key'}</label>
        <div class=${css.inputFields}>${inputField}</div>
      </div>`
    return inputContainer
    function cb (msg, el, value) {
      output.innerHTML = ""
      output.innerHTML = msg ? `<span class=${css.valError} title="${msg}">
        <i class="fa fa-exclamation"></i>
      </span>` : `<span class=${css.valSuccess} title="The value is valid.">
        <i class="fa fa-check"></i>
      </span>`
      el.parentNode.appendChild(output)
    }
  }
  function getInputField ({ theme, type, cb}) {
    var field
    if ((type.search(/\]/) != -1)) field = inputArray({ theme, type, cb })
    else {
      if ((type.search(/\buint/) != -1) || (type.search(/\bint/) != -1)) field = inputInteger({ theme, type, cb })
      if (type.search(/\bbyte/) != -1) field = inputByte({ theme, type, cb })
      if (type.search(/\bstring/) != -1) field = inputString({ theme, type, cb })
      if (type.search(/\bfixed/) != -1) field = inputInteger({ theme, type, cb })
      if (type.search(/\bbool/) != -1) field = inputBoolean({ theme, type, cb })
      if (type.search(/\baddress/) != -1) field = inputAddress({ theme, type, cb })
    }
    return field
  }
}
const variables = {
  inputParamPadding: '',
  inputParamColor: '',
  inputParamFontSize: '',
  inputParamTextAlign: '',
  valErrorColor: '',
  valErrorBackgroundColor: '',
  valSuccessColor: '',
  valSuccessBackgroundColor: '',
}
const classes = csjs`
.inputContainer {
  display: grid;
  grid-template-columns: 25% auto;
  grid-template-rows: auto;
  margin-bottom: 22px;
  position: relative;
  z-index: 3;
}
.inputParam {
  padding: var(--inputParamPadding);
  color: var(--inputParamColor);
  font-size: var(--inputParamFontSize);
  text-align: var(--inputParamTextAlign);
  word-break: break-all;
  transition: color .3s ease-in-out;
}
.inputFields {
  position: relative;
  display: inline-grid;
  grid-row-gap: 20px;
  align-items: center;
}
.output {
  position: absolute;
  top: 5px;
  right: -25px;
  align-self: center;
}
.output i {
  font-size: 1.2rem;
}
.output span {
  display: inline-block;
  border-radius: 30px;
  width: 20px;
  height: 20px;
  text-align: center;
}
.valError {
  color: var(--valErrorColor);
  background-color: var(--valErrorBackgroundColor);
  margin-top: 2px;
  transition: colors .6s, background-color .6s ease-in-out;
}
.valSuccess {
  color: var(--valSuccessColor);
  background-color: var(--valSuccessBackgroundColor);
  transition: colors .6s, background-color .6s ease-in-out;
}`