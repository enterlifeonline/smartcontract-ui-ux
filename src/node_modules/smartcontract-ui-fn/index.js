const bel = require('bel')
const csjs = require('csjs-inject')

const makeParameterForm = require('smartcontract-ui-fn/parameter-form')

const inputPayable = require("input-payable")

// const glossary = require('glossary')

const id = 'smartcontract-ui-fn'
var counter = 1

module.exports = smartcontractuiFN
/*
    function functions (fn) {
      var notify
      var el_fn = smartcontractFN(fn, protocol)
      return el_fn
      function protocol (_notify) {
        notify = _notify
        return (msg) => {
          const {type, body} = msg
          console.log(`[${name}] receives:`, msg)
          if (type === 'toggle') return toggle('e', null, null)
          if (type === 'send') return sendTx(fn.name, label, e)
          i
        }
      }
    }

*/

function smartcontractuiFN ({ data, theme = {} }, protocol) {
  const name = `${id}/${counter++}`
  const notify = protocol(msg => console.log(`[${name}] receives:`, msg))

  const css = Object.assign({}, classes, theme.classes)
  const vars = Object.assign({}, variables, theme.variables)
  const send = []

  const formState = {}
  var obj

  // var label = fn.stateMutability
  // var fnName = bel`<a title="${glossary(label)}" class=${css.fnName}><span class=${css.name}>${fn.name}</span></a>`
  // var title = bel`<h3 class=${css.title} onclick=${toggle}>${fnName}</h3>`
  // var send = bel`<button class="${css.button} ${css.send}" 
  //           onclick=${send}>SEND <i class="${css.icon} fa fa-arrow-right"></i></button>`
  // var functionClass = css[label]

  if (!data || data.type === 'constructor') {
    const msg = `Publish the contract first
      (this executes the Constructor function).
      After that you will be able to start
      sending/receiving data using the
      contract functions below.`.split('\n').map(x => x.trim()).join(' ')
    const publishBtn = bel`<button class="${css.button} ${css.deploy}" title=${msg}>
      PUBLISH <i class="${css.icon} fa fa-arrow-right"></i>
    </button>`
    publishBtn.onclick = event => notify({ type: 'publish', body: formState })
    obj = [bel`<div class=${css.actions}>${publishBtn}</div>`]

    if (data) {
      const fn = JSON.parse(JSON.stringify(data))
      if (fn.stateMutability === 'payable') fn.payable = inputPayable({ unit: 'ether' }, notify => msg => {
        console.log(`[${name}] receives:`, msg)
        const { from, type, body } = msg
        if (type === 'data') return formState[from] = body
      })
      console.error('@TODO: make args more generic `{ data, theme }` ??')
      fn.inputsCtor = makeParameterForm({ data: fn.inputs, theme: { variables } }, notify => {
        send.push(notify)
        return msg => console.log(`[${name}] receives:`, msg)
      })
      obj.unshift(fn.inputsCtor)
      if (fn.payable) obj.unshift(fn.payable)
      obj.unshift(bel`<div class=${css.publishInformation}>${msg}</div>`)
    }
  } else {
    obj = {}
    obj.name = data.name
    obj.type = data.type
    obj.inputs = data.inputs && makeParameterForm({ data: data.inputs }, notify => {
      send.push(notify)
      return msg => console.log(`[${name}] receives:`, msg)
    })
    obj.outputs = data.outputs && makeParameterForm({ data: data.outputs }, notify => {
      send.push(notify)
      return msg => console.log(`[${name}] receives:`, msg)
    })
    obj.stateMutability = data.stateMutability
  }

  updateTheme(vars)
  // var el = bel`<div class="${functionClass} ${css.function}">
  //   ${title}
  //   <div class=${css.visible}>
  //     <div class=${css.inputsList}>
  //       ${fn.inputs}
  //     </div>
  //     <div class=${css.actions}>
  //       ${send}
  //     </div>
  //   </div>
  // </div>`
  // if (label === 'payable')  send.parentNode.insertAdjacentElement('beforeBegin', inputPayable({ theme, label}))
  console.log(obj)
  return (!data || data.type === 'constructor') ?
    bel`<div class=${css.smartcontractuiFN}>${obj}</div>`
    : obj
  function updateTheme (vars) {
    Object.keys(variables).forEach(name => {
      document.body.style.setProperty(`--${name}`, vars[name])
    })
    // send down to child components
    send.forEach(notify => notify({ type: 'theme', body: vars }))
  }
}
const variables = {
  publishInformationColor: '',
  deployColor: '',
  deployFontSize: '',
  deployBackgroundColor: '',
  deployHoverColor: '',
  deployHoverBackgroundColor: '',
}
const classes = csjs`
.smartcontractuiFN {
  margin: 0;
}
.publishInformation {
  margin-bottom: 22px;
  font-size: 1.4rem;
  color: var(--publishInformationColor);
}
.actions {
  position: relative;
  text-align: center;
  z-index: 3;
}
.button {
  cursor: pointer;
}
.button:disabled {
  cursor: not-allowed;
}
.deploy {
  color: var(--deployColor);
  font-size: var(--deployFontSize);
  background-color: var(--deployBackgroundColor);
  border-radius: 30px;
  padding: 6px 22px;
  transition: background-color .6s ease-in-out;
  position: relative;
  right: -15px;
} 
.deploy:hover {
  color: var(--deployHoverColor);
  background-color: var(--deployHoverBackgroundColor);
}
.deploy:hover .icon, .send:hover .icon {
  animation: arrowMove 1s ease-in-out infinite;
}
@keyframes arrowMove {
  0% {
    right: 0;
  }
  50% {
    right: -10px;
  }
  100% {
    right: 0;
  }
}
@-webki-tkeyframes arrowMove {
  0% {
    right: 0;
  }
  50% {
    right: -10px;
  }
  100% {
    right: 0;
  }
}`
// const css = csjs`
// .fnName {
//   font-size: 2rem;
//   text-decoration: none;
// }
// .name {
//   font-size: ${colors.nameFontSize};
// }
// .title {
//   font-size: ${colors.titleFontSize};
//   margin-bottom: 16px;
// }
// .title:hover  {
//   cursor: pointer;
//   opacity: .6;
// }
// .button {
//   margin: 0;
// }
// .send {
//   color: ${colors.sendColor};
//   font-size: ${colors.sendFontSize};
//   background-color: ${colors.sendBackgroundColor};
//   padding: 10px 17px 10px 22px;
//   border-radius: 30px;
//   position: absolute;
//   right: -35px;
//   bottom: -28px;
//   transition: background-color .6s ease-in-out;
// }
// .icon {
//   font-size: 1.6rem;
//   position: relative;
// }
// .send .icon {
//   font-size: 1.2rem;
// }
// .deploying {
//   padding: 20px 14px 20px 20px;
//   margin:1px -12px 0 -20px;
//   background-color: rgba(128,134,186, .6);
// }`
// const css = csjs`
// .smartcontract-ui-fn {
//   box-sizing: border-box;
//   border: 3px dashed purple;
// }`