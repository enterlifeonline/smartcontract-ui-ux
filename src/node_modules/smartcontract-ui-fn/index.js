const bel = require('bel')
const csjs = require('csjs-inject')

const makeParameterForm = require('./parameter-form')

const inputPayable = require("input-payable")

const id = 'smartcontract-ui-fn'
var counter = 1

module.exports = smartcontractuiFN

function smartcontractuiFN ({ data, theme = {} }, protocol) {
  const name = `${id}/${counter++}`
  const notify = protocol(msg => console.log(`[${name}] receives:`, msg))
  const css = theme.classes || classes
  const vars = theme.variables || variables
  const send = []
  console.log('classes', theme.classes)
  console.log('vars', theme.variables)

  const fn = generateFunction(data)

  updateTheme(vars)
  return fn
  function updateTheme (vars) {
    Object.keys(variables).forEach(name => {
      document.body.style.setProperty(`--${name}`, vars[name])
    })
    send.forEach(notify => notify({ type: 'theme', body: vars }))
  }
  function generateFunction (fn) {
    if (!fn || fn.type === 'constructor') {
      const msg = `Publish the contract first
      (this executes the Constructor function).
      After that you will be able to start
      sending/receiving data using the
      contract functions below.`.split('\n').map(x => x.trim()).join(' ')
      const publishBtn = bel`<button class="${css.button} ${css.deploy}" title=${msg}>
        PUBLISH <i class="${css.icon} fa fa-arrow-right"></i>
      </button>`
      publishBtn.onclick = event => notify({ type: 'publish' })
      var arr = [bel`<div class=${css.actions}>${publishBtn}</div>`]
      if (fn) {
        if (fn.stateMutability === 'payable') fn.payable = inputPayable('payable')
        fn.inputsCtor = makeParameterForm({ data: fn.inputs }, notify => {
          send.push(notify)
          return msg => console.log(`[${name}] receives:`, msg)
        })
        arr.unshift(fn.inputsCtor)
        if (fn.payable) arr.unshift(fn.payable)
      }
      arr.unshift(bel`<div class=${css.publishInformation}>${msg}</div>`)
      return arr
    }
    var obj = {}
    obj.name = fn.name
    obj.type = fn.type
    obj.inputs = fn.inputs && makeParameterForm({ data: fn.inputs }, notify => {
      send.push(notify)
      return msg => console.log(`[${name}] receives:`, msg)
    })
    obj.outputs = fn.outputs && makeParameterForm({ data: fn.outputs }, notify => {
      send.push(notify)
      return msg => console.log(`[${name}] receives:`, msg)
    })
    obj.stateMutability = fn.stateMutability
    return obj
  }
}
const variables = {
  publishInformationColor: '',
  deployColor: '',
  deployFontSize: '',
  deployBackgroundColor: '',
  deployHoverColor: '',
  deployHoverBackgroundColor: '',
}
const classes = csjs`
.smartcontract-ui-fn {
  margin: 0;
}
.publishInformation {
  margin-bottom: 22px;
  font-size: 1.4rem;
  color: var(--publishInformationColor);
}
.actions {
  position: relative;
  text-align: center;
  z-index: 3;
}
.button {
  cursor: pointer;
}
.button:disabled {
  cursor: not-allowed;
}
.deploy {
  color: var(--deployColor);
  font-size: var(--deployFontSize);
  background-color: var(--deployBackgroundColor);
  border-radius: 30px;
  padding: 6px 22px;
  transition: background-color .6s ease-in-out;
  position: relative;
  right: -15px;
} 
.deploy:hover {
  color: var(--deployHoverColor);
  background-color: var(--deployHoverBackgroundColor);
}
.deploy:hover .icon, .send:hover .icon {
  animation: arrowMove 1s ease-in-out infinite;
}
@keyframes arrowMove {
  0% {
    right: 0;
  }
  50% {
    right: -10px;
  }
  100% {
    right: 0;
  }
}
@-webki-tkeyframes arrowMove {
  0% {
    right: 0;
  }
  50% {
    right: -10px;
  }
  100% {
    right: 0;
  }
}`