const ethers = require('ethers')

module.exports = getReturnData

function getReturnData (opts) {
  var iface = new ethers.utils.Interface(opts.solcMetadata.output.abi)
  var fun = opts.contract.interface.functions[opts.fnName]
  return decodeReturnData(opts.transaction, fun.outputs) // CHANGE
}

function decodeReturnData (txReturn, txTypes) {
  if (Array.isArray(txReturn)) {  // recursive case
    return txReturn.map((x, i) => decodeReturnData(x, getTypes(txTypes, i)))
  } else { // atomic case
    return decode(txReturn, getTypes(txTypes, 0))
  }
}

function decode (txReturn, txType) {
  var type = txType.type
  if (type.includes('int')) return Number(txReturn.toString())
  else return txReturn
}

function getTypes(types, i) {
  if (types.components) return types.components
  if (Array.isArray(types) && types[i].type) return types[i]
  return types
}
